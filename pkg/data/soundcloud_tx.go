package data

import (
	"context"
	"database/sql"

	"github.com/Southclaws/fault"
	"github.com/Southclaws/fault/fmsg"
)

/*
Contains a series of functions used to interface with the queries generated by sqlc
for the purpose of processing multiple records at once
*/

func (sDB *SerenDB) TxUpsertSoundCloudPlaylistAndTracks(p SoundcloudPlaylist, tracks []SoundcloudTrack) error {
	tx, err := sDB.Begin()

	if err != nil {
		return fault.Wrap(
			err,
			fmsg.With("Error starting transaction"),
		)
	}
	defer tx.Rollback()

	qtx := sDB.Queries.WithTx(tx)

	insertedP, err := qtx.UpsertSoundCloudPlaylist(context.Background(), UpsertSoundCloudPlaylistParams{
		ExternalID: p.ExternalID,
		Name:       p.Name,
		SearchUrl:  p.SearchUrl,
		Permalink:  p.Permalink,
	})

	if err != nil {
		tx.Rollback()
		return fault.Wrap(
			err,
			fmsg.With("Error inserting playlist"),
		)
	}

	for _, t := range tracks {
		insertedT, err := qtx.UpsertSoundCloudTrack(context.Background(), UpsertSoundCloudTrackParams{
			ExternalID:          t.ExternalID,
			Name:                t.Name,
			Permalink:           t.Permalink,
			PurchaseTitle:       t.PurchaseTitle,
			PurchaseUrl:         t.PurchaseUrl,
			HasDownloadsLeft:    t.HasDownloadsLeft,
			Genre:               t.Genre,
			ArtworkUrl:          t.ArtworkUrl,
			TagList:             t.TagList,
			PublisherArtist:     t.PublisherArtist,
			SoundCloudUser:      t.SoundCloudUser,
			LocalPath:           t.LocalPath,
			LocalPathBroken:     t.LocalPathBroken,
			RemovedFromPlaylist: t.RemovedFromPlaylist,
		})

		if err != nil {
			tx.Rollback()
			return fault.Wrap(
				err,
				fmsg.With("Error inserting track"),
			)
		}

		_, err = qtx.UpsertSoundCloudPlaylistTrack(context.Background(), UpsertSoundCloudPlaylistTrackParams{
			SoundcloudPlaylistID: sql.NullInt64{Valid: true, Int64: insertedP.ID},
			SoundcloudTrackID:    sql.NullInt64{Valid: true, Int64: insertedT.ID},
		})

		if err != nil {
			tx.Rollback()
			return fault.Wrap(
				err,
				fmsg.With("Error inserting playlist track"),
			)
		}
	}

	tx.Commit()

	return nil
}

func (sDB *SerenDB) TxUpsertSoundCloudTracks(t []SoundcloudTrack) error {
	tx, err := sDB.Begin()

	if err != nil {
		return fault.Wrap(
			err,
			fmsg.With("Error starting transaction"),
		)
	}

	defer tx.Rollback()

	qtx := sDB.Queries.WithTx(tx)

	for _, t := range t {

		_, err := qtx.UpsertSoundCloudTrack(context.Background(), UpsertSoundCloudTrackParams{
			ExternalID:          t.ExternalID,
			Name:                t.Name,
			Permalink:           t.Permalink,
			PurchaseTitle:       t.PurchaseTitle,
			PurchaseUrl:         t.PurchaseUrl,
			HasDownloadsLeft:    t.HasDownloadsLeft,
			Genre:               t.Genre,
			ArtworkUrl:          t.ArtworkUrl,
			TagList:             t.TagList,
			PublisherArtist:     t.PublisherArtist,
			SoundCloudUser:      t.SoundCloudUser,
			LocalPath:           t.LocalPath,
			LocalPathBroken:     t.LocalPathBroken,
			RemovedFromPlaylist: t.RemovedFromPlaylist,
		})

		if err != nil {
			tx.Rollback()
			return fault.Wrap(
				err,
				fmsg.With("Error inserting track"),
			)
		}
	}

	tx.Commit()

	return nil
}
